{
  
    
        "post0": {
            "title": "An Overview of SymPy",
            "content": "Importing Sympy . from sympy import * . from sympy import * . Symbols . Symbols can be created in a few different ways in SymPy, for example, sympy.Symbol, sympy.symbols, and sympy.var . x = Symbol(&#39;x&#39;) x . $ displaystyle x$ The variable $x$ now represents an abstract mathematical symbol which could, for example, represent a real number, an integer, a complex number, a function, as well as a large number of other possibilities. If we have a mathematical variable $y$ that is known to be a real number, we can use the real=True keyword argument when creating the corresponding symbol instance. We can verify that SymPy indeed recognizes that the symbol is real by using the is_real attribute of the Symbol class: . y = Symbol(&#39;y&#39;, real=True) y.is_real . True . If, on the other hand we were to use is_real to query the previously defined symbol $x$, which was not explicitly specified to real, and therefore can represent both real and nonreal variables, we get None as result: . x.is_real is None . False . is_real returns True if the symbol is known to be real, False if the symbol is known to be not real, and None if it is not known if the symbol is real or not . Symbol(&#39;z&#39;, imaginary=True).is_real . False . Explicitly specifying when creating new symbols as real and positive or anything else as required, can help SymPy to simplify various expressions further than otherwise possible. . x = Symbol(&#39;x&#39;) y = Symbol(&#39;y&#39;, positive=True) . sqrt(x**2) . $ displaystyle sqrt{x^{2}}$ sqrt(y**2) . $ displaystyle y$ When working with mathematical symbols that represent integers, rather than real numbers, it is also useful to explicitly specify this when creating the corresponding SymPy symbols, using, for example, the integer=True, or even=True or odd=True, if applicable. This may also allow SymPy to analytically simplify certain expressions and function evaluations. . n1 = Symbol(&#39;n&#39;) n2 = Symbol(&#39;n&#39;, integer=True) n3 = Symbol(&#39;n&#39;, odd=True) . cos(n1*pi) . $ displaystyle cos{ left( pi n right)}$ cos(n2*pi) . $ displaystyle left(-1 right)^{n}$ cos(n3*pi) . $ displaystyle -1$ Using Python’s tuple unpacking syntax together with a call to sympy.symbols is a convenient way to create multiple symbols: . a, b, c = symbols(&#39;a, b, c&#39;, negative=True) d, e, f = symbols(&#39;d, e, f&#39;, positive=True) . Constants and Special Symbols . Selected mathematical constants and special symbols and their corresponding symbols in SymPy: . Mathematical Symbol SymPy Symbol Description . $ pi$ | pi | Ratio of the circumference to the diameter of a circle. | . $e$ | E | The base of the natural logarithm $e = exp (1)$. | . $ gamma$ | EulerGamma | Euler&#39;s constant | . $i$ | I | The imaginary unit. | . $ infty$ | oo | Infinity | . Functions . Undefined Functions . x, y, z = symbols(&#39;x, y, z&#39;) f = Function(&#39;f&#39;) type(f) . sympy.core.function.UndefinedFunction . f(x) . $ displaystyle f{ left(x right)}$ g = Function(&#39;g&#39;)(x, y, z) g . $ displaystyle g{ left(x,y,z right)}$ g.free_symbols . {x, y, z} . Defined Functions . type(sin) . sympy.core.function.FunctionClass . sin(1.5*pi) . $ displaystyle -1$ n = Symbol(&#39;n&#39;) sin(n*pi) . $ displaystyle sin{ left( pi n right)}$ n = Symbol(&#39;n&#39;, integer=True) sin(n*pi) . $ displaystyle 0$ Lambda Functions . It can be created sympy.Lambda . f = Lambda(x, x**2) f . $ displaystyle left( x mapsto x^{2} right)$ f(1.5) . $ displaystyle 2.25$ f(1 + x) . $ displaystyle left(x + 1 right)^{2}$ Expressions . In SymPy, mathematical expressions are represented as trees where leafs are symbols, and nodes are class instances that represent mathematical operations. Examples of these classes are Add, Mul, and Pow for basic arithmetic operators, and Sum, Product, Integral, and Derivative for analytical mathematical operations. . x = symbols(&#39;x&#39;) expr = 1 + x + x**2 + x**3 expr . $ displaystyle x^{3} + x^{2} + x + 1$ expr.args . (1, x, x**2, x**3) . expr.args[0] . $ displaystyle 1$ expr.args[1] . $ displaystyle x$ expr.args[2] . $ displaystyle x^{2}$ expr.args[3] . $ displaystyle x^{3}$ Manipulating Expressions . Simplification . expr = 2 * (x**2 - x) - x * (x + 1) expr . $ displaystyle 2 x^{2} - x left(x + 1 right) - 2 x$ simplify(expr) . $ displaystyle x left(x - 3 right)$ expr.simplify() . $ displaystyle x left(x - 3 right)$ expr . $ displaystyle 2 x^{2} - x left(x + 1 right) - 2 x$ expr = 2 * cos(x) * sin(x) expr . $ displaystyle 2 sin{ left(x right)} cos{ left(x right)}$ expr.simplify() . $ displaystyle sin{ left(2 x right)}$ expr = exp(x)*exp(y) expr . $ displaystyle e^{x} e^{y}$ simplify(expr) . $ displaystyle e^{x + y}$ Each specific type of simplification can also be carried out with more specialized functions, such as sympy.trigsimp and sympy.powsimp, for trigonometric and power simplifications, respectively. Summary of selected SymPy functions for simplifying expressions: . Function Description . sympy.simplify | Attempt various methods and approaches to obtain a simpler form of a given expression. | . sympy.trigsimp | Attempt to simplify an expression using trigonometric identities. | . sympy.powsimp | Attempt to simplify an expression using laws of powers. | . sympy.compsimp | Simplify combinatorial expressions. | . sympy.ratsimp | Simplify an expression by writing on a common denominator | . Expand . expr = (x + 1) * (x + 2) expr . $ displaystyle left(x + 1 right) left(x + 2 right)$ expand(expr) . $ displaystyle x^{2} + 3 x + 2$ sin(x + y).expand(trig=True) . $ displaystyle sin{ left(x right)} cos{ left(y right)} + sin{ left(y right)} cos{ left(x right)}$ log(x * y).expand(log=True) . $ displaystyle log{ left(x y right)}$ a, b = symbols(&#39;a, b&#39;, positive=True) log(a*b).expand(log=True) . $ displaystyle log{ left(a right)} + log{ left(b right)}$ expr = exp(a + I*b) expr . $ displaystyle e^{a + i b}$ expr.expand(complex=True) . $ displaystyle i e^{a} sin{ left(b right)} + e^{a} cos{ left(b right)}$ Factor, Collect and Combine . expr = x**2 - 1 factor(expr) . $ displaystyle left(x - 1 right) left(x + 1 right)$ expr = x*cos(y) + x*sin(z) factor(expr) . $ displaystyle x left( sin{ left(z right)} + cos{ left(y right)} right)$ expr = log(a) - log(b) logcombine(expr) . $ displaystyle log{ left( frac{a}{b} right)}$ expr = x + y + x*z + x*y expr.collect(x) . $ displaystyle x left(y + z + 1 right) + y$ expr.collect(y) . $ displaystyle x z + x + y left(x + 1 right)$ Apart, Together and Cancel . apart(1/(x**2 + 3*x + 2), x) . $ displaystyle - frac{1}{x + 2} + frac{1}{x + 1}$ together(1 / (y * x + y) + 1 / (1+x)) . $ displaystyle frac{y + 1}{y left(x + 1 right)}$ cancel(y / (y * x + y)) . $ displaystyle frac{1}{x + 1}$ Substitutions . (x + y).subs(x, y) . $ displaystyle 2 y$ expr = sin(x*exp(x)) expr . $ displaystyle sin{ left(x e^{x} right)}$ expr.subs(x, y) . $ displaystyle sin{ left(y e^{y} right)}$ For muliple substitutions, we can pass a dictionary as first and only argument to subs, which maps old symbols or expressions to new symbols or expressions: . expr = sin(x * z) expr . $ displaystyle sin{ left(x z right)}$ expr.subs({sin:cos, x:y, z:exp(x)}) . $ displaystyle cos{ left(y e^{x} right)}$ expr = x*y + z**2* x . To substitute numerical values in place of symbolic number, for numerical evaluation, a convenient way of doing this is to define a dictionary that translates the symbols to numerical values, and passing this dictionary as argument to the subs method. . expr . $ displaystyle x y + x z^{2}$ values = {x:1.25, y:0.04, z:3.2} . expr.subs(values) . $ displaystyle 12.85$ Numerical Evaluation . Even when working with symbolic mathematics, it is almost invariably sooner or later required to evaluate the symbolic expressions numerically, for example, when producing plots or concrete numerical results. A SymPy expression can be evaluated using either the sympy.N function, or the evalf method of SymPy expression instances. Both sympy.N and the evalf method take an optional argument that specifies the number of significant digits to which the expression is to be evaluated. . N(1 + pi) . $ displaystyle 4.14159265358979$ N(pi, 10) . $ displaystyle 3.141592654$ (x + 1/pi).evalf() . $ displaystyle x + 0.318309886183791$ (x + 1/pi).evalf(5) . $ displaystyle x + 0.31831$ sympy.lambdify function takes a set of free symbols and an expression as arguments, and generates a function that efficiently evaluates the numerical value of the expression. The produced function takes the same number of arguments as the number of free symbols passed as first argument to sympy.lambdify. . x = symbols(&#39;x&#39;) expr = sin(pi*x*exp(x)) expr . $ displaystyle sin{ left( pi x e^{x} right)}$ expr_num = lambdify(x, expr) expr_num(10) . 0.879393997597802 . By passing the optional argument &#39;numpy&#39; as third argument to sympy.lambdify SymPy creates a vectorized function that accepts NumPy arrays as input. . expr_num = lambdify(x, expr, &#39;numpy&#39;) import numpy as np xvalues = np.arange(1, 10) expr_num(xvalues) . array([ 0.77394269, 0.64198244, 0.72163867, 0.94361635, 0.20523391, 0.97398794, 0.97734066, -0.87034418, -0.69512687]) . Calculas . Derivatives . In SymPy we can calculate the derivative of a function using sympy.diff . x = Symbol(&#39;x&#39;) f = Function(&#39;f&#39;)(x) diff(f, x) . $ displaystyle frac{d}{d x} f{ left(x right)}$ diff(f, x, x) . $ displaystyle frac{d^{2}}{d x^{2}} f{ left(x right)}$ diff(f, x, 3) . $ displaystyle frac{d^{3}}{d x^{3}} f{ left(x right)}$ For multivariate functions - . x, y, z = symbols(&#39;x, y, z&#39;) g = Function(&#39;g&#39;)(x, y) g.diff(x, y) . $ displaystyle frac{ partial^{2}}{ partial y partial x} g{ left(x,y right)}$ g.diff(x, 3, y, 2) . $ displaystyle frac{ partial^{5}}{ partial y^{2} partial x^{3}} g{ left(x,y right)}$ For defined functions - . expr = x**4 + x**3 + x**2 + x + 1 expr.diff(x) . $ displaystyle 4 x^{3} + 3 x^{2} + 2 x + 1$ expr.diff(x, x) . $ displaystyle 2 left(6 x^{2} + 3 x + 1 right)$ expr = (x + 1)**3 * y**2 *(z - 1) expr.diff(x, y, z) . $ displaystyle 6 y left(x + 1 right)^{2}$ For trigonometric functions - . expr = sin(x * y) * cos(x / 2) expr.diff(x) . $ displaystyle y cos{ left( frac{x}{2} right)} cos{ left(x y right)} - frac{ sin{ left( frac{x}{2} right)} sin{ left(x y right)}}{2}$ Alternative way (delayed evaluation) - . expr = exp(cos(x)) d = Derivative(expr, x) d . $ displaystyle frac{d}{d x} e^{ cos{ left(x right)}}$ d.doit() . $ displaystyle - e^{ cos{ left(x right)}} sin{ left(x right)}$ Integrals . a, b, x, y = symbols(&#39;a, b, x, y&#39;) f = Function(&#39;f&#39;)(x) integrate(f) . $ displaystyle int f{ left(x right)} , dx$ integrate(f, (x, a, b)) . $ displaystyle int limits_{a}^{b} f{ left(x right)} , dx$ integrate(sin(x)) . $ displaystyle - cos{ left(x right)}$ integrate(sin(x), (x, a, b)) . $ displaystyle cos{ left(a right)} - cos{ left(b right)}$ integrate(exp(-x**2), (x, 0, oo)) . $ displaystyle frac{ sqrt{ pi}}{2}$ SymPy will not be able to give symbolic results for any integral. When SymPy fails to evaluate an integral, an instance of sympy.Integral, representing the formal integral, is returned instead. . integrate(sin(x*cos(x)), x) . $ displaystyle int sin{ left(x cos{ left(x right)} right)} , dx$ Multibariable expressions - . integrate(sin(x*exp(y)), x) . $ displaystyle - e^{- y} cos{ left(x e^{y} right)}$ expr = (x + y)**2 integrate(expr, x) . $ displaystyle frac{x^{3}}{3} + x^{2} y + x y^{2}$ By passing more than one symbol, or more than one tuple that contain symbols and their integration limits, we can carry out multiple integration: . expr = (x + y)**2 integrate(expr, (x, 0, 1), (y, 0, 1)) . $ displaystyle frac{7}{6}$ Series . x = Symbol(&#39;x&#39;) f = Function(&#39;f&#39;)(x) series(f, x) . $ displaystyle f{ left(0 right)} + x left. frac{d}{d x} f{ left(x right)} right|_{ substack{ x=0 }} + frac{x^{2} left. frac{d^{2}}{d x^{2}} f{ left(x right)} right|_{ substack{ x=0 }}}{2} + frac{x^{3} left. frac{d^{3}}{d x^{3}} f{ left(x right)} right|_{ substack{ x=0 }}}{6} + frac{x^{4} left. frac{d^{4}}{d x^{4}} f{ left(x right)} right|_{ substack{ x=0 }}}{24} + frac{x^{5} left. frac{d^{5}}{d x^{5}} f{ left(x right)} right|_{ substack{ x=0 }}}{120} + O left(x^{6} right)$ To change the point around which the function is expanded, we specify $x_0$ argument - . x0 = Symbol(&#39;{x_0}&#39;) f.series(x, x0, n=2) . $ displaystyle f{ left({x_0} right)} + left(x - {x_0} right) left. frac{d}{d xi_{1}} f{ left( xi_{1} right)} right|_{ substack{ xi_{1}={x_0} }} + O left( left(x - {x_0} right)^{2}; x rightarrow {x_0} right)$ f.series(x, x0, n=2).removeO() . $ displaystyle left(x - {x_0} right) left. frac{d}{d xi_{1}} f{ left( xi_{1} right)} right|_{ substack{ xi_{1}={x_0} }} + f{ left({x_0} right)}$ For specified functions - . sin(x).series() . $ displaystyle x - frac{x^{3}}{6} + frac{x^{5}}{120} + O left(x^{6} right)$ cos(x).series() . $ displaystyle 1 - frac{x^{2}}{2} + frac{x^{4}}{24} + O left(x^{6} right)$ exp(x).series() . $ displaystyle 1 + x + frac{x^{2}}{2} + frac{x^{3}}{6} + frac{x^{4}}{24} + frac{x^{5}}{120} + O left(x^{6} right)$ (1/(1 + x)).series() . $ displaystyle 1 - x + x^{2} - x^{3} + x^{4} - x^{5} + O left(x^{6} right)$ For arbitrary expressions of symbols and functions, which in general can also be evaluated. . expr = cos(x)/(1 + sin(x*y)) expr.series(x, n=4) . $ displaystyle 1 - x y + x^{2} left(y^{2} - frac{1}{2} right) + x^{3} left(- frac{5 y^{3}}{6} + frac{y}{2} right) + O left(x^{4} right)$ expr.series(y, n=4) . $ displaystyle cos{ left(x right)} - x y cos{ left(x right)} + x^{2} y^{2} cos{ left(x right)} - frac{5 x^{3} y^{3} cos{ left(x right)}}{6} + O left(y^{4} right)$ Limits . In SymPy, limits can be evaluated using the sympy.limit function, which takes an expression, a symbol it depends on, as well as the value that the symbol approaches in the limit. . limit(sin(x)/x, x, 0) . $ displaystyle 1$ f = Function(&#39;f&#39;) x, h = symbols(&#39;x, h&#39;) diff_limit = (f(x + h) - f(x))/h limit(diff_limit.subs(f, cos), h, 0) . $ displaystyle - sin{ left(x right)}$ limit(diff_limit.subs(f, sin), h, 0) . $ displaystyle cos{ left(x right)}$ Sums and Products . n = symbols(&#39;n&#39;, integer=True) x = Sum(1/n**2, (n, 1, oo)) x . $ displaystyle sum_{n=1}^{ infty} frac{1}{n^{2}}$ x.doit() . $ displaystyle frac{ pi^{2}}{6}$ x = Product(n, (n, 1, 7)) x . $ displaystyle prod_{n=1}^{7} n$ x.doit() . $ displaystyle 5040$ Equations . x = Symbol(&#39;x&#39;) solve(x**2 + 2*x -3) . [-3, 1] . a, b, c, x = symbols(&#39;a, b, c, x&#39;) solve(a*x**2 + b*x + c, x) . [(-b + sqrt(-4*a*c + b**2))/(2*a), -(b + sqrt(-4*a*c + b**2))/(2*a)] . Trigonometric Functions - . solve(sin(x) - cos(x), x) . [-3*pi/4, pi/4] . Solving a system of equations for more than one unknown variable in SymPy is a straightforward generalization of the procedure used for univariate equations. Instead of passing a single expression as first argument to sympy.solve, a list of expressions that represent the system of equations is used, and in this case the second argument should be a list of symbols to solve for. . eq1 = x + 2*y -1 eq2 = x - y + 1 solve([eq1, eq2], [x, y], dict=True) . [{x: -1/3, y: 2/3}] . eq1 = x**2 - y eq2 = y**2 - x sols = solve([eq1, eq2], [x, y], dict=True) sols . [{x: 0, y: 0}, {x: 1, y: 1}, {x: (-1/2 - sqrt(3)*I/2)**2, y: -1/2 - sqrt(3)*I/2}, {x: (-1/2 + sqrt(3)*I/2)**2, y: -1/2 + sqrt(3)*I/2}] . Verification - . [eq1.subs(sol).simplify() == 0 and eq2.subs(sol).simplify() == 0 for sol in sols] . [True, True, True, True] . Linear Algebra . Matrix([1, 2]) . $ displaystyle left[ begin{matrix}1 2 end{matrix} right]$ Matrix([ [1, 2 ] ]) . $ displaystyle left[ begin{matrix}1 &amp; 2 end{matrix} right]$ Matrix( [[1, 2], [3, 4] ]) . $ displaystyle left[ begin{matrix}1 &amp; 2 3 &amp; 4 end{matrix} right]$ Matrix(3, 4, lambda m, n: 10*m + n) . $ displaystyle left[ begin{matrix}0 &amp; 1 &amp; 2 &amp; 3 10 &amp; 11 &amp; 12 &amp; 13 20 &amp; 21 &amp; 22 &amp; 23 end{matrix} right]$ a, b, c, d = symbols(&#39;a, b, c, d&#39;) M = Matrix([[a, b], [c, d] ] ) M . $ displaystyle left[ begin{matrix}a &amp; b c &amp; d end{matrix} right]$ M * M . $ displaystyle left[ begin{matrix}a^{2} + b c &amp; a b + b d a c + c d &amp; b c + d^{2} end{matrix} right]$ x = Matrix(symbols(&quot;x_1, x_2&quot;)) x . $ displaystyle left[ begin{matrix}x_{1} x_{2} end{matrix} right]$ M * x . $ displaystyle left[ begin{matrix}a x_{1} + b x_{2} c x_{1} + d x_{2} end{matrix} right]$ Practical Examples . 1. Newton&#39;s Law of Cooling . By Analytical Way using SymPy . $$ frac{dT(t)}{dt} = k(T(t) - T_a)$$ at $t=0$, $T(0)=T_0$. . from sympy import * . T, Ta, T0, k, t = symbols(&#39;T, T_a, T_0, k, t&#39;) T = Function(&#39;T&#39;) diff_eq = Eq(T(t).diff(t),-k*(T(t) - Ta)) diff_eq . $ displaystyle frac{d}{d t} T{ left(t right)} = - k left(- T_{a} + T{ left(t right)} right)$ sol = dsolve(diff_eq) sol . $ displaystyle T{ left(t right)} = C_{1} e^{- k t} + T_{a}$ ic = Eq(sol.rhs.subs(t, 0), T0) ic . $ displaystyle C_{1} + T_{a} = T_{0}$ const = solve(ic) const . [{C1: T_0 - T_a}] . final_sol = sol.subs(const[0]) final_sol . $ displaystyle T{ left(t right)} = T_{a} + left(T_{0} - T_{a} right) e^{- k t}$ T =lambdify([Ta, T0, k, t], final_sol.rhs) T . &lt;function _lambdifygenerated(T_a, T_0, k, t)&gt; . import numpy as np import matplotlib.pyplot as plt k = 0.5 Ta = 22 T0 = 100 t = np.linspace(0, 10, 100) fig, ax = plt.subplots(figsize=(8, 4)) ax.plot(t, T(Ta, T0, k, t), color=&#39;red&#39;, label=&quot;&quot;&quot;$T_a$ = %0.1f, $T_0$ = %0.1f, k = %0.2f&quot;&quot;&quot;%(Ta, T0, k)) ax.set_xlabel(&#39;Time ($t$) in sec.&#39;, fontsize=16) ax.set_ylabel(&#39;Temperature ($T$) in $^{ circ}C$&#39;, fontsize=16) ax.set_title(&#39;Cooling Curve&#39;, fontsize=20) # removing top and right spines ax.spines[&#39;right&#39;].set_color(&#39;none&#39;) ax.spines[&#39;top&#39;].set_color(&#39;none&#39;) # move bottom and left spine to x = 0 and y = 0 ax.spines[&#39;bottom&#39;].set_position((&#39;data&#39;, 0)) ax.spines[&#39;left&#39;].set_position((&#39;data&#39;, 0)) ax.set_xticks(range(0, 11, 1)) ax.set_yticks(range(0, 110, 10)) ax.legend(frameon=False) ax.grid(False) . 2. Damped harmonic Oscillator . $$ frac{d^2 x(t)}{dt^2} + 2 gamma omega_0 frac{d x(t)}{dt} + omega_0^2 x(t) = 0$$ where $x(t)$ is the position of the oscillator at time $t$, $ omega_0$ is the frequency of the oscillator in the undamped case and $ gamma$ is the damping ratio. . t, omega0, gamma = symbols(&#39;t, omega_0, gamma&#39;, positive=True) x = Function(&#39;x&#39;) ode = x(t).diff(t, 2) + 2*gamma*omega0*x(t).diff(t) + omega0**2 *x(t) ode . $ displaystyle 2 gamma omega_{0} frac{d}{d t} x{ left(t right)} + omega_{0}^{2} x{ left(t right)} + frac{d^{2}}{d t^{2}} x{ left(t right)}$ Eq(ode) . $ displaystyle 2 gamma omega_{0} frac{d}{d t} x{ left(t right)} + omega_{0}^{2} x{ left(t right)} + frac{d^{2}}{d t^{2}} x{ left(t right)} = 0$ ode_sol = dsolve(Eq(ode)) ode_sol . $ displaystyle x{ left(t right)} = C_{1} e^{ omega_{0} t left(- gamma - sqrt{ gamma - 1} sqrt{ gamma + 1} right)} + C_{2} e^{ omega_{0} t left(- gamma + sqrt{ gamma - 1} sqrt{ gamma + 1} right)}$ Initial conditions: . at time $t=0$, displacement of the oscillator, $x(t) = 1$ | at time $t=0$, velocity of the oscillator, $ frac{d x(t)}{dt} = 0$ | ic1 = x(t).subs(t, 0) ic2 = x(t).diff(t).subs(t, 0) ics = {ic1:1, ic2:0} ics . {x(0): 1, Subs(Derivative(x(t), t), t, 0): 0} . eq1 = Eq(ode_sol.rhs.subs(t, 0), 1) eq2 = Eq(ode_sol.rhs.diff(t).subs(t, 0), 0) constants = solve([eq1, eq2]) x_t_sol = ode_sol.subs(constants[0]) x_t_sol . $ displaystyle x{ left(t right)} = left(- frac{ gamma}{2 sqrt{ gamma^{2} - 1}} + frac{1}{2} right) e^{ omega_{0} t left(- gamma - sqrt{ gamma - 1} sqrt{ gamma + 1} right)} + left( frac{ gamma}{2 sqrt{ gamma^{2} - 1}} + frac{1}{2} right) e^{ omega_{0} t left(- gamma + sqrt{ gamma - 1} sqrt{ gamma + 1} right)}$ x_t_critical = limit(x_t_sol.rhs, gamma, 1) x_t_critical . $ displaystyle left( omega_{0} t + 1 right) e^{- omega_{0} t}$ fig, ax = plt.subplots(figsize=(14, 8)) tt = np.linspace(0, 3, 300) w0 = 2* np.pi for g in [0.1, 0.5, 1, 2.0, 5.0]: if g == 1: x_t = lambdify(t, x_t_critical.subs({omega0:w0, gamma:g}), &#39;numpy&#39;) else: x_t = lambdify(t, x_t_sol.rhs.subs({omega0:w0, gamma:g}), &#39;numpy&#39;) ax.plot(tt, x_t(tt).real, label=&quot;$ gamma = %.1f$&quot; % g ) ax.set_xlabel(r&quot;$t$&quot;, fontsize=18) ax.set_ylabel(r&quot;$x(t)$&quot;, fontsize=18) ax.set_title(&#39;Damped Harmonic Oscillator&#39;, fontsize=20) # removing top and right spines ax.spines[&#39;right&#39;].set_color(&#39;none&#39;) ax.spines[&#39;top&#39;].set_color(&#39;none&#39;) # move bottom and left spine to x = 0 and y = 0 ax.spines[&#39;bottom&#39;].set_position((&#39;data&#39;, 0)) ax.spines[&#39;left&#39;].set_position((&#39;data&#39;, 0)) ax.set_xticks(np.arange(0, 4, 1)) ax.set_yticks(np.arange(-1, 1.5, 0.5)) ax.legend(frameon=False) ax.grid(False) plt.legend(frameon=False, loc=&#39;upper right&#39;) plt.grid(False) .",
            "url": "https://subirsarkar2021.github.io/CompPhyWithPython/2021/04/10/sympy01.html",
            "relUrl": "/2021/04/10/sympy01.html",
            "date": " • Apr 10, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Radioactivity",
            "content": "import numpy as np import matplotlib.pyplot as plt import random from scipy.integrate import odeint from scipy.integrate import solve_ivp . Radioactive Decay by solving ODE . Rate of decay of a radioactive nuclei is $$ frac{dN}{dt} = - lambda N $$ . This is a first order differential equation which can be solved by any standard method. But, we must mention initial condition of the decay, i.e. at time $t=0$, what is number of radioactive nuclei $N(0)$ present in the substance? Consider, $$ text{at}~~~ t=0, hspace{1cm}N(0)=N_0$$ . N0 = 1000 T_half = 4.5*60 lamda = 1/ T_half . Creating time array . t_init, t_final, step_size = 0, 1000, 1 t = np.arange(t_init, t_final, step_size) . Model of radioactivity . def model(N, t): return -lamda*N . By odeint method from scipy.integrate . sol = odeint(model, N0, t) N = sol[:, 0] plt.plot(t, N, ls=&#39;--&#39;, color=&#39;red&#39;, label=&#39;Parent nucleus&#39;) plt.plot(t, N0 - N, ls=&#39;--&#39;, color=&#39;blue&#39;, label=&#39;Daughter nucleus&#39;) plt.legend() plt.show() . By solve.ivp from scipy.integrate . def model(t, N): # order of the argument is very important; first independent and then dependent variable return -lamda*N sol = solve_ivp(model, t_span=(t[0], t[-1]), y0=([N0]), t_eval= t) t = sol.t N = sol.y.T plt.plot(t, N, ls=&#39;--&#39;, color=&#39;green&#39;, label=&#39;Parent nucleus&#39;) plt.plot(t, N0 - N, ls=&#39;--&#39;, color=&#39;orange&#39;, label=&#39;Daughter nucleus&#39;) plt.legend() plt.show() . Simulation of Radioactive Decay by Monte Carlo method . P = [] # Parent Nucleus D = [] # Daughter Nucleus T_half = 4.5*60 # Half life lamda = 1/ T_half # Decay constant N = 1000 # Initial number of Radioactive nuclei Np, Nd = N, 0 time = np.arange(0, 1000, 1) for t in time: P.append(Np) D.append(Nd) decay = 0 for n in range(Np): p = random.random() if p &lt; lamda: decay += 1 Np -= decay Nd += decay plt.plot(P, linestyle=&#39;-&#39;, color=&#39;red&#39;, label=&#39;Parent Nucleus&#39;) plt.plot(D, linestyle=&#39;-&#39;, color=&#39;blue&#39;, label=&#39;Daughter Nucleus&#39;) plt.legend() plt.xlabel(&#39;t&#39;, fontsize=14) plt.ylabel(&#39;N(t)&#39;, fontsize=14) plt.show() .",
            "url": "https://subirsarkar2021.github.io/CompPhyWithPython/2021/04/10/Radioactive_Decay-(1).html",
            "relUrl": "/2021/04/10/Radioactive_Decay-(1).html",
            "date": " • Apr 10, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Newton's law of cooling",
            "content": "You are supposed to serve a cup of hot coffee and waiting eagerly for getting it little cold so that the most desired sip in the coffee cup can be made. You must be knowing that the equation that governs the cooling down of hot coffee is the Newton&#39;s law of cooling, given by $$ frac{dT}{dt}= -k(T-T_s)$$ Here, $T$ is the temperature of the body and $T_s$ is the temperature of the surrounding. $k$ is a constant of proportionality, called heat transfer coefficient. . This is a first order ODE, which can be solved by any standard procedure. Let us try to solve the problem by odieint function from SciPy package, and also by RK4 method. . import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint . # basic parameters T0 = 70 Ts = 30 k_list = np.array([0.005, 0.05, 0.01]) color = [&#39;red&#39;, &#39;blue&#39;, &#39;green&#39;] # Discretize the independent variable &#39;t&#39; t_init, t_final, step_size = 0, 300, 0.1 t = np.arange(t_init, t_final, step_size) @np.vectorize def model(T, t, k): &#39;&#39;&#39; dT/dt = - k(T-Ts) &#39;&#39;&#39; slope = - k*(T-Ts) return slope # solving by &#39;odeint&#39; function for i in range(len(k_list)): sol = odeint(model, T0, t, args=(k_list[i], )) T = sol[:, 0] plt.plot(t, T, color=color[i], label=&#39;k = %0.3f&#39;%k_list[i]) plt.xlabel(&#39;$t$&#39;, fontsize=14) plt.ylabel(&#39;$ frac{dT}{dt}$&#39;, fontsize=14) plt.legend() plt.show() . # Create array for dependent variable &quot;T&quot; T = np.zeros(len(t)) T[0] = T0 # Defining the helper functions def rk4(T, t, h, k): k1 = model(T, t, k) k2 = model(T+k1*h/2, t+h/2, k) k3 = model(T+k2*h/2, t+h/2, k) k4 = model(T+k3*h, t+h, k) k_avg = (k1+2*(k2+k3)+k4)/6 T_new = T + k_avg*h return T_new h = step_size for j in range(len(k_list)): for i in range(len(t)-1): T[i+1]=rk4(T[i], t[i], h, k_list[j]) plt.plot(t, T, color=color[j], label=&#39;k = %0.3f&#39;%k_list[j]) plt.xlabel(&#39;$t$&#39;, fontsize=14) plt.ylabel(&#39;$ frac{dT}{dt}$&#39;, fontsize=14) for i in range(len(k_list)): plt.text(150, 30+i*30/3, &#39;$k_{%d} = $&#39;%(i+1), fontsize=13) for i in range(len(k_list)): plt.text(180, 30+i*30/3, &#39; %0.3f &#39;%k_list[i], fontsize=13) plt.show() . So, how quickly a coffee cup will cool down depends on the value of $k$. .",
            "url": "https://subirsarkar2021.github.io/CompPhyWithPython/2021/04/02/Newton's-law-of-cooling.html",
            "relUrl": "/2021/04/02/Newton's-law-of-cooling.html",
            "date": " • Apr 2, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "A Numerical Approach to Solve Ordinary Differential equation (ODE)",
            "content": "Differential equation is perhaps one such mathematical entity which we maximum encounter in any branch of science and technology and without solving it we can not get insight of the system. That is why a robust knowledge of solving differential equation is very much desireable and hence, it is included in the curriculum of undergraduate syllabus of any science discipline. Analytical method of solving differential equation is quite straight forward. But it too fail to crack the problem if it is of complex nature. . In that case, numerical technique plays a signifivant role which can solve the problem in its own way. That is why along with the technique of analytical methodlogy theknowledge of numerical technique of solving differential equation is highly desired. . In this section, a few numerical technique will be discussed. The most simple, may be the first stepping stone in the pursuit of solving differential equation is the Euler&#39;s method. . Consider the following ODE $$ frac{dy}{dx}= frac{y+x}{y-x}, hspace{0.5cm}y(0)=1 $$ Let us find the value $y$ at $x=0.6$, taking the step size = 0.2. . import numpy as np import matplotlib.pyplot as plt . So, first of all discretize the domain of independent variable either by arange or linspace function of NumPy. . x_init, x_final, step_size = 0, 0.6, 0.2 x = np.arange(x_init, x_final+step_size, step_size) . Next, we have to create arrays for storing the values of dependent variable. Since, we are trying to visualize the difference between different methods of solving differential equation, we have to create array for each method. . y = np.zeros(len(x)) # array for Euler method y_mod = np.zeros(len(x)) # array for Modified Euler method y_rk2 = np.zeros(len(x)) # array for RK2 method y_rk4 = np.zeros(len(x)) # array for RK4 method y_odeint = np.zeros(len(x)) # array for odeint method # Initialize your variables y[0] = 1 y_mod[0] = 1 y_rk2[0] = 1 y_rk4[0] = 1 y_odeint[0] = 1 . Next, we have to define a few helper functions. Since, the most essential part of solving differential equation is to estimate the value of slope at the desired point/points, so, we have to define a function which we may call model. So, the model function in our problem is given by . f = lambda y, x: (y+x)/(y-x) #Slope function def model(y, x): slope = f(y, x) # f(x,y) may be repleced by appropriate value according to the problem return slope . In the above representation of function definition, one may simply stick to model function. The additional f function for better clarity, keeping in mind a new learner. . Consider, the differential equation $$ frac{dy}{dx}=f(x,y(x))$$ . The idea of solving a differential equation numerically is to evaluate any future value of the dependent variable $y$ with the known value of independnt varibale $x$, known value of slope, and step-size of the interval, i.e. $$ text{y_new} = y + text{slope} times text{step-size}$$ . Suppose, the value of the dependent variable $y_i$ is known at $x_i$ and we want to know the corresponding value at $x_{i+1}$ which is at a distance $h$ apart from $x_i$, then, $$y_{i+1}=y_i + frac{dy}{dx} Bigr|_{(x_i,y_i)} cdot h$$ . where, $ frac{dy}{dx} Bigr|_{(x_i,y_i)}=f(x_i, y(x_i))$ is known at the point $(x_i, y_i)$. But, the accuracy of the method lies in the value of step-size (h). So, we can define a function eulerFunc for evaluating the values of dependent variable $y$ corresponding to the values of dependent variable $x$. . . def eulerFunc(y, x, h): y_new = y + model(y, x)*h return y_new . The success of Euler&#39;s method which depends heavily on small stepsize ($h$) may amount to long time of evalaution. This limitation may, however, be overcome by evaluating the slopes of the function at $x_i$ and $x_{i+1}$, and then taking an average of both for calculating the future value at $x_{i+1}$. This is implemented with the following function. . . def eulerModFunc(y, x, h): k1 = model(y, x) # slope at (x, y) y_p = y + k1*h # predicted &#39;y&#39; value at &#39;x+h&#39; based on &#39;k1&#39; k2 = model(y_p, x+h) # slope at (x+h, y+h) k_avg = (k1+k2)/2 # average of the slopes at &#39;k1&#39; and &#39;k2&#39; y_c = y + k_avg*h # corrected &#39;y&#39; value at &#39;x+h&#39; based on &#39;k_avg&#39; return y_c . Runge Kutta method of second order follows an intermediate path between previous two methods. Here, we first evaluate slope $k_1$ at $x_i$ and then $k_2$ at $x_{i+ frac{h}{2}}$ with the slope value $k_1$ evaluated at $x_i$. This slope $k_2$ is used to evaluate $y_{i+1}$. We define following function for its implementation. . . def rk2Func(y, x, h): k1 = model(y, x) k2 = model(y+k1*h/2, x+h/2) y_new = y + k2*h return y_new . In the Runge Kutta method of order four, average of slope values evaluated at four different points within the interval $(x_i, x_{i+1})$ is used to calculate $y_{i+1}$ with the known values of $y_i$ at $x_i$. . . def rk4Func(y, x, h): k1 = model(y, x) k2 = model(y+k1*h/2, x+h/2) k3 = model(y+k2*h/2, x+h/2) k4 = model(y+k3*h, x+h) k_avg = (k1+2*(k2+k3)+k4)/6 y_new = y + k_avg*h return y_new . h = step_size for i in range(len(x)-1): y[i+1] = eulerFunc(y[i], x[i], h) y_mod[i+1] = eulerModFunc(y_mod[i], x[i], h) y_rk2[i+1] = rk2Func(y_rk2[i], x[i], h) y_rk4[i+1] = rk4Func(y_rk2[i], x[i], h) x, y, y_mod, y_rk2, y_rk4 . (array([0. , 0.2, 0.4, 0.6]), array([1. , 1.2 , 1.48 , 1.82814815]), array([1. , 1.24 , 1.55008688, 1.91272733]), array([1. , 1.24 , 1.55126961, 1.91510223]), array([1. , 1.23923542, 1.54961688, 1.91355796])) . Besides the above mentioned numerical methods, where writing a few lines of coding is required on the part of the user, there is a function called odeint under SciPy package which can directly solve a differential equation. . from scipy.integrate import odeint y0 = y[0] sol = odeint(model, y0, x) y_odeint = sol[:, 0] y_odeint . array([1. , 1.23923039, 1.54891242, 1.91148762]) . plt.figure(figsize=(10,5)) plt.plot(x, y, ls = &#39;:&#39;, marker=&#39;^&#39;, markersize=10, color=&#39;red&#39;, label=&#39;Euler method&#39;) plt.plot(x, y_mod, ls = &#39;:&#39;, marker=&#39;*&#39;, markersize=10, color=&#39;blue&#39;, label=&#39;ModifiedEuler method&#39;) plt.plot(x, y_rk2, ls = &#39;:&#39;, marker=&#39;o&#39;, markersize=10, color=&#39;green&#39;, label=&#39;RK2 method&#39;) plt.plot(x, y_rk4, ls = &#39;:&#39;, marker=&#39;&lt;&#39;, markersize=10, color=&#39;orange&#39;, label=&#39;RK4 method&#39;) plt.plot(x, y_odeint, ls = &#39;:&#39;, marker=&#39;^&#39;, markersize=10, color=&#39;purple&#39;, label=&#39;odeint method&#39;) plt.xlabel(&#39;x&#39;, fontsize=14) plt.ylabel(&#39;y(x)&#39;, fontsize=14) plt.title(&#39;Comaparison of Euler, Modified Euler, RK2, RK4 and odeint Method&#39;, fontsize=16) plt.legend(frameon=False, loc=&#39;best&#39;) plt.show() . So, what we see from the above representation that except basic Euler&#39;s method, all other methods are equivalent and one may use any one of them. .",
            "url": "https://subirsarkar2021.github.io/CompPhyWithPython/2021/04/01/Numerical-Solution-ODE.html",
            "relUrl": "/2021/04/01/Numerical-Solution-ODE.html",
            "date": " • Apr 1, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Projectile Motion - II",
            "content": "In my previous post, I discussed how to simulate vertical motion of the free fall of a projectile without considering air resistance. In this section, I am going to simulate another kind of projectile motion cosidering effect of air resistance. Consider a cannonball fired towards a target with a certain velocity, say $100 m/s$. Suppose, the target is at a distance 100 kilometer from the cannon. What should be the angle of fire so that cannonball hits the target accurately? Consider, the air resistance to be approximately 0.01. . The projectile motion is influenced by force of gravity and drag force due to air resistance. The equation of motion - . For motion in horizontal direction | $$ frac{d^2x}{dt^2}=-kv_x$$ . For motion in vertical direction $$ frac{d^2y}{dt^2}=-g -kv_y$$ | For numerically solving the differential equations, let us split them into two first order differential equations. . $$ frac{dx}{dt}=v_x $$ $$ frac{dv_x}{dt}=-kv_x$$ $$ frac{dy}{dt}=v_y $$ $$ frac{dv_y}{dt}=-g-kv_y$$ . The initial conditions are $$ x(0) = 0 y(0) = 0 v_x(0)=v cos theta v_y(0)=v sin theta $$ . $ theta$ is the angle of projection. . So, the plan of simulation is as follows - . Solving the differential equations by any standard method. I am using odeint function from SciPy package to solve the differential equations. For a particular angle of projection ($ theta$), the solver function will give horizontal distance ($x$), vertical distance ($y$), horizontal velocity ($v_x$) and vertical velocity ($v_y$) at different time step ($t$). | By applying linear interpolation, we can exactly estimate the point where the projectile hits the ground. | Then, we can find out the difference between the target and the point of hitting on the ground by the projectile. | The difference existing between the target and the point of hitting on the ground by the projectile for an arbitrary angle of projection can be minimised below a tolerance limit by searching appropriate value of angle. This can be done by &quot;Bisection method&quot; usually employed to locate the root of a polynomial function. | import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint from scipy.optimize import bisect #basic parametrs k = 0.01 g = 9.8 v = 100 target = 500 t_init, t_final, step_size = 0, 20, 0.001 t = np.arange(t_init, t_final, step_size) z = np.zeros([len(t),4]) def model(z, t, params): x, y, vx, vy = z dx_dt = vx dy_dt = vy dvx_dt = -k*vx dvy_dt = -g-k*vy dz_dt = np.array([dx_dt, dy_dt, dvx_dt, dvy_dt]) return dz_dt @np.vectorize def diff(theta): theta = np.radians(theta) params = [k, g, theta] x0, y0, vx0, vy0 = 0, 0, v*np.cos(theta), v*np.sin(theta) z0 = [x0, y0, vx0, vy0] sol = odeint(model, z0, t, args=(params,)) x, y, vx, vy = sol[:, 0], sol[:, 1], sol[:, 2], sol[:, 3] y = y[y&gt;=0] x = x[:len(y)] vx = vx[:len(y)] vy = vy[:len(y)] xground = x[-2] + y[-2]*(x[-1]-x[-2])/(y[-1]-y[-2]) diff = xground - target return diff . def plot(): fig, ax = plt.subplots(figsize=(8, 5)) # set the x-spine ax.spines[&#39;left&#39;].set_position(&#39;zero&#39;) # turn off the right spine/ticks ax.spines[&#39;right&#39;].set_color(&#39;none&#39;) ax.yaxis.tick_left() # set the y-spine ax.spines[&#39;bottom&#39;].set_position(&#39;zero&#39;) # turn off the top spine/ticks ax.spines[&#39;top&#39;].set_color(&#39;none&#39;) ax.xaxis.tick_bottom() . plot() theta = np.arange(10, 90, 0.1) plt.plot(theta, diff(theta), &#39;:r&#39;) plt.xlabel(&#39;$ theta$&#39;, fontsize=14) plt.ylabel(&#39;$ Delta x$&#39;, fontsize=14) plt.xlim(0, 90) plt.show() . $ Delta x$ which represents the difference between target and projectile hitting point is plotted against different angle of projection. It is seen that there are two angles of projection for which projectile can accurately hit the target. The first one lies in the interval $(10^{ circ}, 20^{ circ})$ and the second one in the interval $(70^{ circ}, 80^{ circ})$. Using bisect function from SciPy, we can find the exact value of angle. . angle1 = bisect(diff, 10, 20) angle2 = bisect(diff, 70, 80) print(&#39; n Angle1 = %0.2f&#39;%angle1,&#39; n Angle2 = %0.2f&#39;%angle2) diff1 = diff(angle1) diff2 = diff(angle2) print(&#39; n Difference for angle1 = %0.3f&#39;%diff1,&#39; n Difference for angle2 = %0.11f&#39;%diff2) . Angle1 = 15.26 Angle2 = 73.15 Difference for angle1 = -0.085 Difference for angle2 = -0.00000000002 . After getting the exact value of angle of projection, using projectile function, we can depict the projectile trajectory as shown in figure. . import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint from scipy.optimize import bisect def model(z, t, params): x, y, vx, vy = z dx_dt = vx dy_dt = vy dvx_dt = -k*vx dvy_dt = -g-k*vy dz_dt = np.array([dx_dt, dy_dt, dvx_dt, dvy_dt]) return dz_dt def projectile(angle): theta = np.radians(angle) params = [k, g, theta] x0, y0, vx0, vy0 = 0, 0, v*np.cos(theta), v*np.sin(theta) z0 = [x0, y0, vx0, vy0] sol = odeint(model, z0, t, args=(params,)) x, y, vx, vy = sol[:, 0], sol[:, 1], sol[:, 2], sol[:, 3] y = y[y&gt;=0] x = x[:len(y)] vx = vx[:len(y)] vy = vy[:len(y)] return x, y plot() x1, y1 = projectile(angle1) x2, y2 = projectile(angle2) plt.plot(x1, y1, ls=&#39;--&#39;, color=&#39;purple&#39;, label=&#39;$ theta$ = %d$^ circ}$&#39;%angle1) plt.plot(x2, y2, ls=&#39;--&#39;, color=&#39;blue&#39;, label=&#39;$ theta$ = %d$^ circ}$&#39;%angle2) plt.plot(500, 0, &#39;ro&#39;, markersize=10) plt.plot(0, 0, &#39;ko&#39;, markersize=10) plt.ylim(0, 500) plt.xlabel(&#39;x&#39;, fontsize=14) plt.ylabel(&#39;y&#39;, fontsize=14) plt.title(&#39;Projectile Motion&#39;, fontsize=16) plt.legend(frameon=False) plt.annotate(&#39;Starting point&#39;, xy=(0,0), xytext=(50, 100), arrowprops=dict(arrowstyle=&#39;-&gt;&#39;), fontsize=14) plt.annotate(&#39;Target&#39;, xy=(500,0), xytext=(350, 100), arrowprops=dict(arrowstyle=&#39;-&gt;&#39;), fontsize=14) plt.show() .",
            "url": "https://subirsarkar2021.github.io/CompPhyWithPython/2021/03/31/Projectile-Motion-II.html",
            "relUrl": "/2021/03/31/Projectile-Motion-II.html",
            "date": " • Mar 31, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "Simulating Projectile motion with Python - I",
            "content": "The most common physical phenomenon in our day to day life is the motion of an object in air. It may be observed in any game or similar other activities. We may observe an object moving up in air and coming down due to gravity or it may be thrown in air making an angle with horizontal in which case it travels in air for some time and finally, falls on the ground. We may simulate the motion in computer with the knowledge of basic numerical methods and coding. This helps in understanding and viewing the effect of various physical parameters like angle of projection or air resistance etc. on the prjectile motion. . In this section, I shall demonstrate the simulation of a simple vertical motion of a projectile without considering air resistance. Consider throwing a projectile vertically in the upward direction and expect it to come back and hit the ground after ten second. The motion of the projectile can be described by $$ frac{d^2 y}{dt^2} = -g, hspace{0.5cm}y(0)=0 $$ Here, $g$ is the acceleration due to gravity. This is a second order differential equation. To solve this type equation, we need two initial conditions - initial position and initial velocity. If we know the initial position and if we do not have prior knowledge of initial velocity which together progress the simulation, then we can apply a numerical technique, called &quot;shooting method&quot; to obtain correct value of velocity. So, for simulating this projectile motion, we have to do basically two operations. . Solving the differential equation. | Estimating correct initial velocity of projection by &quot;shooting method&quot;. | The differential equation can be solved by any standard method like Euler method or Runge Kutta method. But, we can make use of SciPy package to solve this initial value problem to save time and space. . First of all, we shall import necessary library packages like numpy for creating arrays, SciPy package for solving initial value problem and matplotlib for graphical demonstration of the simulation. . import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp . To solve the second order differential equation numerically, we have to split up into two first order differential equations. $$ frac{dy}{dt} = v frac{dv}{dt} = - g $$ . def plot(): fig, ax = plt.subplots(figsize=(8, 5)) # set the x-spine ax.spines[&#39;left&#39;].set_position(&#39;zero&#39;) # turn off the right spine/ticks ax.spines[&#39;right&#39;].set_color(&#39;none&#39;) ax.yaxis.tick_left() # set the y-spine ax.spines[&#39;bottom&#39;].set_position(&#39;zero&#39;) # turn off the top spine/ticks ax.spines[&#39;top&#39;].set_color(&#39;none&#39;) ax.xaxis.tick_bottom() . def model(t, z): y, v = z dy_dt = v dv_dt = - g dz_dt = [dy_dt, dv_dt] return dz_dt def yFunc(v): v0 = v t = np.linspace(0, 10, 100) t_span = (t[0], t[-1]) y0 = 0 y0 = [y0, v0] sol = solve_ivp(model, t_span, y0, t_eval=t) return sol plot() g = 9.8 v_guess = [35, 55, 75] color = [&#39;red&#39;, &#39;blue&#39;, &#39;green&#39;] for i in range(len(v_guess)): sol = yFunc(v_guess[i]) t = sol.t y = sol.y[0, :] plt.plot(t, y, ls=&#39;:&#39;, color=color[i], lw=3, label=&#39;v = %0.2f&#39;%v_guess[i]) plt.xlabel(&#39;$t$&#39;, fontsize=14) plt.ylabel(&#39;$y(t)$&#39;, fontsize=14) plt.axvline(x = 10, ls=&#39;--&#39;, color=&#39;black&#39;) plt.legend(loc=&#39;best&#39;) plt.show() . Since, we did not have have any prior knowledge of initial velocity, let us start with a guess value of it. It is seen that the solver function has simulated the projectile motion for three different guess values of initial velocities. But, it failed to arrive at the initial point after ten second. The value $v=55 m/s$ is little close to the level of expectation. Other two values are far away from the actual one. This means our guess on initial velocity is not correct. So, we try the simulation with a range of initial velocities. . @np.vectorize def y(v0): t = np.linspace(0, 10, 100) t_span = (t[0], t[-1]) y0 = 0 y0 = [y0, v0] sol = solve_ivp(model, t_span, y0, t_eval=t) t = sol.t y, v = sol.y return y[-1] v0 = np.linspace(0, 100, 100) plot() plt.plot(v0, y(v0), &#39;b--&#39;) plt.xlabel(&#39;$v_{guess}$&#39;, fontsize=14) plt.ylabel(&#39;$y$&#39;, fontsize=14) plt.show() . So, we see that for the velocity around 50, the projectile exactly returns to the initial point. For finding the exact value, we can apply bisection method to loacte the root. We can use SciPy package to apply bisection method. . from scipy.optimize import bisect exact_velocity = bisect(y, 40, 60) print(&quot;Exact velocity = %0.2f&quot;%exact_velocity) . Exact velocity = 49.00 . So, if we throw the projectile with an initial velocity 49 m/s, it will come back exactly after 10 sec. to the initial point. The way to arrive at correct value of initial velocty is called &quot;shooting method&quot;. . In the next post, I shall come up with the case of inclined projectile, i.e. when the projectile is fired making some angle with the horizontal and also, consider the effect of air resistance on the projectile motion. .",
            "url": "https://subirsarkar2021.github.io/CompPhyWithPython/2021/03/29/Projectile-Motion-I.html",
            "relUrl": "/2021/03/29/Projectile-Motion-I.html",
            "date": " • Mar 29, 2021"
        }
        
    
  
    
        ,"post6": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://subirsarkar2021.github.io/CompPhyWithPython/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://subirsarkar2021.github.io/CompPhyWithPython/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://subirsarkar2021.github.io/CompPhyWithPython/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://subirsarkar2021.github.io/CompPhyWithPython/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}