{
  
    
        "post0": {
            "title": "Projectile Motion - II",
            "content": "In my previous post, I discussed how to simulate vertical motion of the free fall of a projectile without considering air resistance. In this section, I am going to simulate another kind of projectile motion cosidering effect of air resistance. Consider a cannonball fired towards a target with a certain velocity, say $100 m/s$. Suppose, the target is at a distance 100 kilometer from the cannon. What should be the angle of fire so that cannonball hits the target accurately? Consider, the air resistance to be approximately 0.01. . The projectile motion is influenced by force of gravity and drag force due to air resistance. The equation of motion - . For motion in horizontal direction | $$ frac{d^2x}{dt^2}=-kv_x$$ . For motion in vertical direction $$ frac{d^2y}{dt^2}=-g -kv_y$$ | For numerically solving the differential equations, let us split them into two first order differential equations. . $$ frac{dx}{dt}=v_x $$ $$ frac{dv_x}{dt}=-kv_x$$ $$ frac{dy}{dt}=v_y $$ $$ frac{dv_y}{dt}=-g-kv_y$$ . The initial conditions are $$ x(0) = 0 y(0) = 0 v_x(0)=v cos theta v_y(0)=v sin theta $$ . $ theta$ is the angle of projection. . So, the plan of simulation is as follows - . Solving the differential equations by any standard method. I am using odeint function from SciPy package to solve the differential equations. For a particular angle of projection ($ theta$), the solver function will give horizontal distance ($x$), vertical distance ($y$), horizontal velocity ($v_x$) and vertical velocity ($v_y$) at different time step ($t$). | By applying linear interpolation, we can exactly estimate the point where the projectile hits the ground. | Then, we can find out the difference between the target and the point of hitting on the ground by the projectile. | The difference existing between the target and the point of hitting on the ground by the projectile for an arbitrary angle of projection can be minimised below a tolerance limit by searching appropriate value of angle. This can be done by &quot;Bisection method&quot; usually employed to locate the root of a polynomial function. | import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint from scipy.optimize import bisect #basic parametrs k = 0.01 g = 9.8 v = 100 target = 500 t_init, t_final, step_size = 0, 20, 0.001 t = np.arange(t_init, t_final, step_size) z = np.zeros([len(t),4]) def model(z, t, params): x, y, vx, vy = z dx_dt = vx dy_dt = vy dvx_dt = -k*vx dvy_dt = -g-k*vy dz_dt = np.array([dx_dt, dy_dt, dvx_dt, dvy_dt]) return dz_dt @np.vectorize def diff(theta): theta = np.radians(theta) params = [k, g, theta] x0, y0, vx0, vy0 = 0, 0, v*np.cos(theta), v*np.sin(theta) z0 = [x0, y0, vx0, vy0] sol = odeint(model, z0, t, args=(params,)) x, y, vx, vy = sol[:, 0], sol[:, 1], sol[:, 2], sol[:, 3] y = y[y&gt;=0] x = x[:len(y)] vx = vx[:len(y)] vy = vy[:len(y)] xground = x[-2] + y[-2]*(x[-1]-x[-2])/(y[-1]-y[-2]) diff = xground - target return diff . def plot(): fig, ax = plt.subplots(figsize=(8, 5)) # set the x-spine ax.spines[&#39;left&#39;].set_position(&#39;zero&#39;) # turn off the right spine/ticks ax.spines[&#39;right&#39;].set_color(&#39;none&#39;) ax.yaxis.tick_left() # set the y-spine ax.spines[&#39;bottom&#39;].set_position(&#39;zero&#39;) # turn off the top spine/ticks ax.spines[&#39;top&#39;].set_color(&#39;none&#39;) ax.xaxis.tick_bottom() . plot() theta = np.arange(10, 90, 0.1) plt.plot(theta, diff(theta), &#39;:r&#39;) plt.xlabel(&#39;$ theta$&#39;, fontsize=14) plt.ylabel(&#39;$ Delta x$&#39;, fontsize=14) plt.xlim(0, 90) plt.show() . $ Delta x$ which represents the difference between target and projectile hitting point is plotted against different angle of projection. It is seen that there are two angles of projection for which projectile can accurately hit the target. The first one lies in the interval $(10^{ circ}, 20^{ circ})$ and the second one in the interval $(70^{ circ}, 80^{ circ})$. Using bisect function from SciPy, we can find the exact value of angle. . angle1 = bisect(diff, 10, 20) angle2 = bisect(diff, 70, 80) print(&#39; n Angle1 = %0.2f&#39;%angle1,&#39; n Angle2 = %0.2f&#39;%angle2) diff1 = diff(angle1) diff2 = diff(angle2) print(&#39; n Difference for angle1 = %0.3f&#39;%diff1,&#39; n Difference for angle2 = %0.11f&#39;%diff2) . Angle1 = 15.26 Angle2 = 73.15 Difference for angle1 = -0.085 Difference for angle2 = -0.00000000002 . After getting the exact value of angle of projection, using projectile function, we can depict the projectile trajectory as shown in figure. . import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint from scipy.optimize import bisect def model(z, t, params): x, y, vx, vy = z dx_dt = vx dy_dt = vy dvx_dt = -k*vx dvy_dt = -g-k*vy dz_dt = np.array([dx_dt, dy_dt, dvx_dt, dvy_dt]) return dz_dt def projectile(angle): theta = np.radians(angle) params = [k, g, theta] x0, y0, vx0, vy0 = 0, 0, v*np.cos(theta), v*np.sin(theta) z0 = [x0, y0, vx0, vy0] sol = odeint(model, z0, t, args=(params,)) x, y, vx, vy = sol[:, 0], sol[:, 1], sol[:, 2], sol[:, 3] y = y[y&gt;=0] x = x[:len(y)] vx = vx[:len(y)] vy = vy[:len(y)] return x, y plot() x1, y1 = projectile(angle1) x2, y2 = projectile(angle2) plt.plot(x1, y1, ls=&#39;--&#39;, color=&#39;purple&#39;, label=&#39;$ theta$ = %d$^ circ}$&#39;%angle1) plt.plot(x2, y2, ls=&#39;--&#39;, color=&#39;blue&#39;, label=&#39;$ theta$ = %d$^ circ}$&#39;%angle2) plt.plot(500, 0, &#39;ro&#39;, markersize=10) plt.plot(0, 0, &#39;ko&#39;, markersize=10) plt.ylim(0, 500) plt.xlabel(&#39;x&#39;, fontsize=14) plt.ylabel(&#39;y&#39;, fontsize=14) plt.title(&#39;Projectile Motion&#39;, fontsize=16) plt.legend(frameon=False) plt.annotate(&#39;Starting point&#39;, xy=(0,0), xytext=(50, 100), arrowprops=dict(arrowstyle=&#39;-&gt;&#39;), fontsize=14) plt.annotate(&#39;Target&#39;, xy=(500,0), xytext=(350, 100), arrowprops=dict(arrowstyle=&#39;-&gt;&#39;), fontsize=14) plt.show() .",
            "url": "https://subirsarkar2021.github.io/CompPhyWithPython/2021/03/31/Projectile-Motion-II.html",
            "relUrl": "/2021/03/31/Projectile-Motion-II.html",
            "date": " • Mar 31, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Simulating Projectile motion with Python - I",
            "content": "The most common physical phenomenon in our day to day life is the motion of an object in air. It may be observed in any game or similar other activities. We may observe an object moving up in air and coming down due to gravity or it may be thrown in air making an angle with horizontal in which case it travels in air for some time and finally, falls on the ground. We may simulate the motion in computer with the knowledge of basic numerical methods and coding. This helps in understanding and viewing the effect of various physical parameters like angle of projection or air resistance etc. on the prjectile motion. . In this section, I shall demonstrate the simulation of a simple vertical motion of a projectile without considering air resistance. Consider throwing a projectile vertically in the upward direction and expect it to come back and hit the ground after ten second. The motion of the projectile can be described by $$ frac{d^2 y}{dt^2} = -g, hspace{0.5cm}y(0)=0 $$ Here, $g$ is the acceleration due to gravity. This is a second order differential equation. To solve this type equation, we need two initial conditions - initial position and initial velocity. If we know the initial position and if we do not have prior knowledge of initial velocity which together progress the simulation, then we can apply a numerical technique, called &quot;shooting method&quot; to obtain correct value of velocity. So, for simulating this projectile motion, we have to do basically two operations. . Solving the differential equation. | Estimating correct initial velocity of projection by &quot;shooting method&quot;. | The differential equation can be solved by any standard method like Euler method or Runge Kutta method. But, we can make use of SciPy package to solve this initial value problem to save time and space. . First of all, we shall import necessary library packages like numpy for creating arrays, SciPy package for solving initial value problem and matplotlib for graphical demonstration of the simulation. . import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp . To solve the second order differential equation numerically, we have to split up into two first order differential equations. $$ frac{dy}{dt} = v frac{dv}{dt} = - g $$ . def plot(): fig, ax = plt.subplots(figsize=(8, 5)) # set the x-spine ax.spines[&#39;left&#39;].set_position(&#39;zero&#39;) # turn off the right spine/ticks ax.spines[&#39;right&#39;].set_color(&#39;none&#39;) ax.yaxis.tick_left() # set the y-spine ax.spines[&#39;bottom&#39;].set_position(&#39;zero&#39;) # turn off the top spine/ticks ax.spines[&#39;top&#39;].set_color(&#39;none&#39;) ax.xaxis.tick_bottom() . def model(t, z): y, v = z dy_dt = v dv_dt = - g dz_dt = [dy_dt, dv_dt] return dz_dt def yFunc(v): v0 = v t = np.linspace(0, 10, 100) t_span = (t[0], t[-1]) y0 = 0 y0 = [y0, v0] sol = solve_ivp(model, t_span, y0, t_eval=t) return sol plot() g = 9.8 v_guess = [35, 55, 75] color = [&#39;red&#39;, &#39;blue&#39;, &#39;green&#39;] for i in range(len(v_guess)): sol = yFunc(v_guess[i]) t = sol.t y = sol.y[0, :] plt.plot(t, y, ls=&#39;:&#39;, color=color[i], lw=3, label=&#39;v = %0.2f&#39;%v_guess[i]) plt.xlabel(&#39;$t$&#39;, fontsize=14) plt.ylabel(&#39;$y(t)$&#39;, fontsize=14) plt.axvline(x = 10, ls=&#39;--&#39;, color=&#39;black&#39;) plt.legend(loc=&#39;best&#39;) plt.show() . Since, we did not have have any prior knowledge of initial velocity, let us start with a guess value of it. It is seen that the solver function has simulated the projectile motion for three different guess values of initial velocities. But, it failed to arrive at the initial point after ten second. The value $v=55 m/s$ is little close to the level of expectation. Other two values are far away from the actual one. This means our guess on initial velocity is not correct. So, we try the simulation with a range of initial velocities. . @np.vectorize def y(v0): t = np.linspace(0, 10, 100) t_span = (t[0], t[-1]) y0 = 0 y0 = [y0, v0] sol = solve_ivp(model, t_span, y0, t_eval=t) t = sol.t y, v = sol.y return y[-1] v0 = np.linspace(0, 100, 100) plot() plt.plot(v0, y(v0), &#39;b--&#39;) plt.xlabel(&#39;$v_{guess}$&#39;, fontsize=14) plt.ylabel(&#39;$y$&#39;, fontsize=14) plt.show() . So, we see that for the velocity around 50, the projectile exactly returns to the initial point. For finding the exact value, we can apply bisection method to loacte the root. We can use SciPy package to apply bisection method. . from scipy.optimize import bisect exact_velocity = bisect(y, 40, 60) print(&quot;Exact velocity = %0.2f&quot;%exact_velocity) . Exact velocity = 49.00 . So, if we throw the projectile with an initial velocity 49 m/s, it will come back exactly after 10 sec. to the initial point. The way to arrive at correct value of initial velocty is called &quot;shooting method&quot;. . In the next post, I shall come up with the case of inclined projectile, i.e. when the projectile is fired making some angle with the horizontal and also, consider the effect of air resistance on the projectile motion. .",
            "url": "https://subirsarkar2021.github.io/CompPhyWithPython/2021/03/29/Projectile-Motion-I.html",
            "relUrl": "/2021/03/29/Projectile-Motion-I.html",
            "date": " • Mar 29, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://subirsarkar2021.github.io/CompPhyWithPython/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://subirsarkar2021.github.io/CompPhyWithPython/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://subirsarkar2021.github.io/CompPhyWithPython/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page9": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://subirsarkar2021.github.io/CompPhyWithPython/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}